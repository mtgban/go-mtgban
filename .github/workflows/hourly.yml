name: Bantool Runner (hourly)
run-name: Bantool (${{ github.event.client_payload.target || github.event.inputs.target || 'all' }})

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'Target to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - cardkingdom
          - cardkingdom_sealed
          - manapool
          - manapool_sealed
          - tcg_index
          - tcg_market
          - tcg_sealed
  repository_dispatch:
    types: [bantool_magic]
  schedule:
    - cron: "10 * * * *"

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set.outputs.matrix }}
    steps:
      - id: set
        run: |
          ALL_TARGETS='[
            "cardkingdom",
            "cardkingdom_sealed",
            "manapool",
            "manapool_sealed",
            "tcg_index",
            "tcg_market",
            "tcg_sealed"
          ]'

          TARGET_JSON="{\"target\":$ALL_TARGETS}"

          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.target }}" != "all" ];
          then
            TARGET_JSON="{\"target\":[\"${{ github.event.inputs.target }}\"]}"
          elif [ "${{ github.event_name }}" = "repository_dispatch" ];
          then
            # Check payload
            PAYLOAD_TARGET="${{ github.event.client_payload.target }}"
            if [ -z "$PAYLOAD_TARGET" ]; then
              echo "Error: repository_dispatch event must include client_payload.target" >&2
              exit 0
            fi

            # Validate against ALL_TARGETS
            if echo "$ALL_TARGETS" | jq -e --arg t "$PAYLOAD_TARGET" '.[] | select(. == $t)' > /dev/null;
            then
              TARGET_JSON="{\"target\":[\"$PAYLOAD_TARGET\"]}"
            else
              echo "Error: Invalid target '$PAYLOAD_TARGET'. Must be one of: $(echo $ALL_TARGETS | jq -r '.[]' | tr '\n' ' ')" >&2
              exit 0
            fi
          fi

          # Escape for $GITHUB_OUTPUT
          ESCAPED_JSON=$(echo "$TARGET_JSON" | jq -c .)
          echo "matrix=$ESCAPED_JSON" >> $GITHUB_OUTPUT

  cache-datastore:
    uses: ./.github/workflows/cache-file.yml
    with:
      url: "https://www.mtgjson.com/api/v5/AllPrintings.json.xz"
      path: "datastore/"

  cache-skus:
    uses: ./.github/workflows/cache-file.yml
    with:
      url: "https://www.mtgjson.com/api/v5/TcgplayerSkus.json.xz"
      path: "datastore/"

  deploy:
    name: Deploy ${{ matrix.target }}
    needs: [prepare-matrix, cache-datastore, cache-skus]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare-matrix.outputs.matrix) }}
    uses: ./.github/workflows/run-bantool.yml
    with:
      target: ${{ matrix.target }}
      game: "magic"
      datastore-filepath: ${{ needs.cache-datastore.outputs.filepath }}
      datastore-cache-key: ${{ needs.cache-datastore.outputs.key }}
      skus-filepath: ${{ needs.cache-skus.outputs.filepath }}
      skus-cache-key: ${{ needs.cache-skus.outputs.key }}
    secrets: inherit
